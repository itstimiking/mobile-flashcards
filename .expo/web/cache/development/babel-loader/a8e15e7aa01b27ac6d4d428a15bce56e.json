{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar MOBILE_FLASHCARDS_DECK_KEY = \"udacityMobileFitnessAppByTimi\";\nvar initialState = {\n  React: {\n    title: 'React',\n    questions: [{\n      question: 'What is React?',\n      answer: 'A library for managing user interfaces'\n    }, {\n      question: 'Where do you make Ajax requests in React?',\n      answer: 'The componentDidMount lifecycle event'\n    }]\n  },\n  JavaScript: {\n    title: 'JavaScript',\n    questions: [{\n      question: 'What is a closure?',\n      answer: 'The combination of a function and the lexical environment within which that function was declared.'\n    }]\n  }\n};\nexport var getDecks = function getDecks() {\n  try {\n    AsyncStorage.getItem(MOBILE_FLASHCARDS_DECK_KEY).then(function (data) {\n      if (data !== null) {\n        return JSON.parse(data);\n      } else {\n        AsyncStorage.setItem(MOBILE_FLASHCARDS_DECK_KEY, JSON.stringify(initialState));\n      }\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport var getDeck = function getDeck(id) {\n  var deck = {};\n  AsyncStorage.mergeItem(packageKey, deck).then(function (data) {\n    return JSON.parse(data);\n  }).then(function (res) {\n    return res[id], _readOnlyError(\"deck\");\n  }).catch(function (err) {\n    return alert(err);\n  });\n  return deck;\n};\nexport var saveDeckTitle = function saveDeckTitle(title) {\n  AsyncStorage.getItem(packageKey, deck).then(function (data) {\n    return JSON.parse(data);\n  }).then(function (res) {\n    return deck = res[id];\n  }).catch(function (err) {\n    return alert(err);\n  });\n};\nexport var addCardToDeck = function addCardToDeck(title, card) {\n  AsyncStorage.getItem(packageKey, deck).then(function (data) {\n    return JSON.parse(data);\n  }).then(function (res) {\n    return deck = res[id];\n  }).catch(function (err) {\n    return alert(err);\n  });\n};","map":{"version":3,"sources":["/home/timiking/Apps/mobile-flashcards/utils/helpers.js"],"names":["React","AsyncStorage","MOBILE_FLASHCARDS_DECK_KEY","initialState","title","questions","question","answer","JavaScript","getDecks","getItem","then","data","JSON","parse","setItem","stringify","err","console","log","getDeck","id","deck","mergeItem","packageKey","res","catch","alert","saveDeckTitle","addCardToDeck","card"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,0BAA0B,GAAG,+BAAnC;AAEA,IAAMC,YAAY,GAAG;AACjBH,EAAAA,KAAK,EAAE;AACLI,IAAAA,KAAK,EAAE,OADF;AAELC,IAAAA,SAAS,EAAE,CACT;AACEC,MAAAA,QAAQ,EAAE,gBADZ;AAEEC,MAAAA,MAAM,EAAE;AAFV,KADS,EAKT;AACED,MAAAA,QAAQ,EAAE,2CADZ;AAEEC,MAAAA,MAAM,EAAE;AAFV,KALS;AAFN,GADU;AAcjBC,EAAAA,UAAU,EAAE;AACVJ,IAAAA,KAAK,EAAE,YADG;AAEVC,IAAAA,SAAS,EAAE,CACT;AACEC,MAAAA,QAAQ,EAAE,oBADZ;AAEEC,MAAAA,MAAM,EAAE;AAFV,KADS;AAFD;AAdK,CAArB;AA2BA,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAE1B,MAAG;AAECR,IAAAA,YAAY,CAACS,OAAb,CAAqBR,0BAArB,EACCS,IADD,CACM,UAAAC,IAAI,EAAI;AACV,UAAGA,IAAI,KAAK,IAAZ,EAAiB;AACb,eAAOC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACH,OAFD,MAEK;AACDX,QAAAA,YAAY,CAACc,OAAb,CAAqBb,0BAArB,EAAiDW,IAAI,CAACG,SAAL,CAAeb,YAAf,CAAjD;AACH;AACJ,KAPD;AASH,GAXD,CAWC,OAAMc,GAAN,EAAU;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AAGJ,CAlBM;AAoBP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,EAAD,EAAQ;AAE3B,MAAMC,IAAI,GAAG,EAAb;AAEArB,EAAAA,YAAY,CAACsB,SAAb,CAAuBC,UAAvB,EAAmCF,IAAnC,EACCX,IADD,CACM,UAAAC,IAAI;AAAA,WAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAJ;AAAA,GADV,EAECD,IAFD,CAEM,UAAAc,GAAG;AAAA,WAAUA,GAAG,CAACJ,EAAD,CAAb;AAAA,GAFT,EAGCK,KAHD,CAGO,UAAAT,GAAG;AAAA,WAAEU,KAAK,CAACV,GAAD,CAAP;AAAA,GAHV;AAKA,SAAOK,IAAP;AACH,CAVM;AAaP,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACxB,KAAD,EAAW;AAEpCH,EAAAA,YAAY,CAACS,OAAb,CAAqBc,UAArB,EAAiCF,IAAjC,EACCX,IADD,CACM,UAAAC,IAAI;AAAA,WAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAJ;AAAA,GADV,EAECD,IAFD,CAEM,UAAAc,GAAG;AAAA,WAAGH,IAAI,GAAGG,GAAG,CAACJ,EAAD,CAAb;AAAA,GAFT,EAGCK,KAHD,CAGO,UAAAT,GAAG;AAAA,WAAEU,KAAK,CAACV,GAAD,CAAP;AAAA,GAHV;AAIH,CANM;AAeN,OAAO,IAAMY,aAAa,GAAG,SAAhBA,aAAgB,CAACzB,KAAD,EAAO0B,IAAP,EAAgB;AAE1C7B,EAAAA,YAAY,CAACS,OAAb,CAAqBc,UAArB,EAAiCF,IAAjC,EACCX,IADD,CACM,UAAAC,IAAI;AAAA,WAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAJ;AAAA,GADV,EAECD,IAFD,CAEM,UAAAc,GAAG;AAAA,WAAGH,IAAI,GAAGG,GAAG,CAACJ,EAAD,CAAb;AAAA,GAFT,EAGCK,KAHD,CAGO,UAAAT,GAAG;AAAA,WAAEU,KAAK,CAACV,GAAD,CAAP;AAAA,GAHV;AAIH,CANO","sourcesContent":["import React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst MOBILE_FLASHCARDS_DECK_KEY = \"udacityMobileFitnessAppByTimi\";\n\nconst initialState = {\n    React: {\n      title: 'React',\n      questions: [\n        {\n          question: 'What is React?',\n          answer: 'A library for managing user interfaces'\n        },\n        {\n          question: 'Where do you make Ajax requests in React?',\n          answer: 'The componentDidMount lifecycle event'\n        }\n      ]\n    },\n    JavaScript: {\n      title: 'JavaScript',\n      questions: [\n        {\n          question: 'What is a closure?',\n          answer: 'The combination of a function and the lexical environment within which that function was declared.'\n        }\n      ]\n    }\n  }\n\n\n\nexport const getDecks = () => {\n\n    try{\n\n        AsyncStorage.getItem(MOBILE_FLASHCARDS_DECK_KEY)\n        .then(data => {\n            if(data !== null){\n                return JSON.parse(data);\n            }else{\n                AsyncStorage.setItem(MOBILE_FLASHCARDS_DECK_KEY, JSON.stringify(initialState))\n            }\n        })\n        \n    }catch(err){\n      console.log(err)\n    }\n\n    \n}\n\nexport const getDeck = (id) => {\n\n    const deck = {}\n\n    AsyncStorage.mergeItem(packageKey, deck)\n    .then(data => JSON.parse(data))\n    .then(res=> deck = res[id])\n    .catch(err=>alert(err))\n\n    return deck\n}\n\n\nexport const saveDeckTitle = (title) => {\n\n    AsyncStorage.getItem(packageKey, deck)\n    .then(data => JSON.parse(data))\n    .then(res=> deck = res[id])\n    .catch(err=>alert(err))\n}\n\n\n/*** addCardToDeck: take in two arguments, title and card, \n * and will add the card to the list of \n * questions for the deck with the associated title.\n * \n */\n\n export const addCardToDeck = (title,card) => {\n\n    AsyncStorage.getItem(packageKey, deck)\n    .then(data => JSON.parse(data))\n    .then(res=> deck = res[id])\n    .catch(err=>alert(err))\n}"]},"metadata":{},"sourceType":"module"}