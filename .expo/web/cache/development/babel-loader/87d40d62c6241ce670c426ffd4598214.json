{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar MOBILE_FLASHCARDS_DECK_KEY = \"udacityMobileFitnessAppByTimi\";\nvar initialState = {\n  React: {\n    title: 'React',\n    questions: [{\n      question: 'What is React?',\n      answer: 'A library for managing user interfaces'\n    }, {\n      question: 'Where do you make Ajax requests in React?',\n      answer: 'The componentDidMount lifecycle event'\n    }]\n  },\n  JavaScript: {\n    title: 'JavaScript',\n    questions: [{\n      question: 'What is a closure?',\n      answer: 'The combination of a function and the lexical environment within which that function was declared.'\n    }]\n  }\n};\nexport var getDecks = function getDecks() {\n  AsyncStorage.getItem(MOBILE_FLASHCARDS_DECK_KEY).then(function (data) {\n    if (data !== null) {\n      var res = JSON.parse(data);\n      return res;\n    } else {\n      var decks = JSON.stringify(initialState);\n      AsyncStorage.setItem(MOBILE_FLASHCARDS_DECK_KEY, decks);\n      AsyncStorage.getItem(MOBILE_FLASHCARDS_DECK_KEY).then(function (data) {\n        console.log(data);\n        return JSON.parse(data);\n      });\n    }\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\nexport var getDeck = function getDeck(id) {\n  var deck = {};\n  AsyncStorage.mergeItem(packageKey, deck).then(function (data) {\n    return JSON.parse(data);\n  }).then(function (res) {\n    return res[id], _readOnlyError(\"deck\");\n  }).catch(function (err) {\n    return alert(err);\n  });\n  return deck;\n};\nexport var saveDeckTitle = function saveDeckTitle(title) {\n  AsyncStorage.getItem(packageKey, deck).then(function (data) {\n    return JSON.parse(data);\n  }).then(function (res) {\n    return deck = res[id];\n  }).catch(function (err) {\n    return alert(err);\n  });\n};\nexport var addCardToDeck = function addCardToDeck(title, card) {\n  AsyncStorage.getItem(packageKey, deck).then(function (data) {\n    return JSON.parse(data);\n  }).then(function (res) {\n    return deck = res[id];\n  }).catch(function (err) {\n    return alert(err);\n  });\n};","map":{"version":3,"sources":["/home/timiking/Apps/mobile-flashcards/utils/helpers.js"],"names":["React","AsyncStorage","MOBILE_FLASHCARDS_DECK_KEY","initialState","title","questions","question","answer","JavaScript","getDecks","getItem","then","data","res","JSON","parse","decks","stringify","setItem","console","log","catch","err","getDeck","id","deck","mergeItem","packageKey","alert","saveDeckTitle","addCardToDeck","card"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst MOBILE_FLASHCARDS_DECK_KEY = \"udacityMobileFitnessAppByTimi\";\n\nconst initialState = {\n    React: {\n      title: 'React',\n      questions: [\n        {\n          question: 'What is React?',\n          answer: 'A library for managing user interfaces'\n        },\n        {\n          question: 'Where do you make Ajax requests in React?',\n          answer: 'The componentDidMount lifecycle event'\n        }\n      ]\n    },\n    JavaScript: {\n      title: 'JavaScript',\n      questions: [\n        {\n          question: 'What is a closure?',\n          answer: 'The combination of a function and the lexical environment within which that function was declared.'\n        }\n      ]\n    }\n  }\n\n\nexport const getDecks = () => {\n\n    AsyncStorage.getItem(MOBILE_FLASHCARDS_DECK_KEY)\n    .then(data => {\n        if(data !== null){\n            const res = JSON.parse(data);\n            return res;\n        }else{\n            const decks = JSON.stringify(initialState)\n            AsyncStorage.setItem(MOBILE_FLASHCARDS_DECK_KEY, decks)\n            AsyncStorage.getItem(MOBILE_FLASHCARDS_DECK_KEY)\n            .then(data => {\n              console.log(data)\n              return JSON.parse(data)\n            })\n        }\n    })\n    .catch(err=> console.log(err))\n}\n\nexport const getDeck = (id) => {\n\n    const deck = {}\n\n    AsyncStorage.mergeItem(packageKey, deck)\n    .then(data => JSON.parse(data))\n    .then(res=> deck = res[id])\n    .catch(err=>alert(err))\n\n    return deck\n}\n\n\nexport const saveDeckTitle = (title) => {\n\n    AsyncStorage.getItem(packageKey, deck)\n    .then(data => JSON.parse(data))\n    .then(res=> deck = res[id])\n    .catch(err=>alert(err))\n}\n\n\n/*** addCardToDeck: take in two arguments, title and card, \n * and will add the card to the list of \n * questions for the deck with the associated title.\n * \n */\n\n export const addCardToDeck = (title,card) => {\n\n    AsyncStorage.getItem(packageKey, deck)\n    .then(data => JSON.parse(data))\n    .then(res=> deck = res[id])\n    .catch(err=>alert(err))\n}"]},"metadata":{},"sourceType":"module"}