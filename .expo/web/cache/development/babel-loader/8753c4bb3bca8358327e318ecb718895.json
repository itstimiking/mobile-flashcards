{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/timiking/Apps/mobile-flashcards/screens/QuizeView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nvar QuizeView = function QuizeView(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var _route$params = route.params,\n      title = _route$params.title,\n      questions = _route$params.questions;\n  var totalQuestions = questions.length;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      correct = _useState2[0],\n      setCorrect = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      failed = _useState4[0],\n      setFailed = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      viewAnswer = _useState6[0],\n      setViewAnswer = _useState6[1];\n\n  var answered = correct + failed;\n  useEffect(function () {}, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, \"Quize On \", title, \" \"), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, answered, \" / \", totalQuestions), React.createElement(Text, {\n    style: styles.question,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, !(answered >= questions.length) ? !viewAnswer ? React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 27\n    }\n  }, \" \", questions[answered].question) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 27\n    }\n  }, \" \", questions[answered].answer) : React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  }, \" Total Score \", answered, \" \"), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 29\n    }\n  }, \" Got \", correct, \" correctly \"), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 29\n    }\n  }, \" Failed \", failed, \" \"), React.createElement(View, {\n    style: styles.finished,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 29\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      setCorrect(0);\n      setFailed(0);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.viewAnswerBtn), {}, {\n      backgroundColor: \"green\"\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 37\n    }\n  }, \"Restart Quize\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.viewAnswerBtn), {}, {\n      backgroundColor: \"red\"\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 37\n    }\n  }, \"Back to Deck\"))))), !(answered >= questions.length) && React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setViewAnswer(!viewAnswer);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.viewAnswerBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, !viewAnswer ? \"Show Answer\" : \"Question\")), !(answered >= questions.length) && React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setCorrect(correct + 1);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.viewAnswerBtn), {}, {\n      backgroundColor: \"green\"\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, \"Correct\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setFailed(failed + 1);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.viewAnswerBtn), {}, {\n      backgroundColor: \"red\"\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }, \"Incorrect\"))));\n};\n\nexport default QuizeView;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  count: {\n    color: \"#666\"\n  },\n  question: {\n    fontSize: 20,\n    marginVertical: 30,\n    color: \"#999\"\n  },\n  viewAnswerBtn: {\n    backgroundColor: \"lightblue\",\n    color: \"white\",\n    padding: 16,\n    width: 200,\n    marginBottom: 20,\n    display: \"flex\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 20\n  },\n  finished: {\n    paddingVertical: 20\n  }\n});","map":{"version":3,"sources":["/home/timiking/Apps/mobile-flashcards/screens/QuizeView.js"],"names":["React","useState","useEffect","TouchableOpacity","QuizeView","route","navigation","params","title","questions","totalQuestions","length","correct","setCorrect","failed","setFailed","viewAnswer","setViewAnswer","answered","styles","container","question","answer","finished","viewAnswerBtn","backgroundColor","goBack","StyleSheet","create","flex","alignItems","justifyContent","count","color","fontSize","marginVertical","padding","width","marginBottom","display","textAlign","borderRadius","paddingVertical"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nconst QuizeView = ({\n    route,\n    navigation\n}) => {\n\n    const {title,questions} = route.params;\n    const totalQuestions = questions.length;\n\n    const [correct, setCorrect] = useState(0);\n    const [failed, setFailed] = useState(0);\n    const [viewAnswer, setViewAnswer] = useState(false);\n\n    const answered = correct + failed;\n\n    useEffect(()=>{\n\n    },[])\n    \n    return (\n        <View style={styles.container}>\n            <Text>Quize On {title} </Text>\n\n            <Text>{answered} / {totalQuestions}</Text>\n\n            <Text style={styles.question}>\n                {\n                    !(answered >= questions.length)\n                    ? (\n                        !viewAnswer\n                        ? <Text> {questions[answered].question}</Text>\n                        : <Text> {questions[answered].answer}</Text>\n                    )\n                    : (\n                        <View>\n                            <Text> Total Score {answered} </Text>\n                            <Text> Got {correct} correctly </Text>\n                            <Text> Failed {failed} </Text>\n\n                            <View style={styles.finished}>\n                                <TouchableOpacity\n                                    onPress={()=>{\n                                        setCorrect(0)\n                                        setFailed(0)\n                                    }}\n                                >\n                                    <Text style={{...styles.viewAnswerBtn, backgroundColor:\"green\"}}> \n                                        Restart Quize \n                                    </Text>\n                                </TouchableOpacity>\n\n                                <TouchableOpacity\n                                    onPress={()=>navigation.goBack()}\n                                >\n                                    <Text style={{...styles.viewAnswerBtn, backgroundColor:\"red\"}}> \n                                        Back to Deck\n                                    </Text>\n                                </TouchableOpacity>\n                            </View>\n                        </View>\n                    )\n                }\n                \n            </Text>\n\n            {\n                !(answered >= questions.length) && (\n                    <TouchableOpacity\n                        onPress={()=>setViewAnswer(!viewAnswer)}\n                    >\n                        <Text style={styles.viewAnswerBtn}>\n                         {!viewAnswer ? \"Show Answer\" : \"Question\"}\n                        </Text>\n                    </TouchableOpacity>\n                )\n            }\n\n            {\n                !(answered >= questions.length) && (\n                    <View>\n                        <TouchableOpacity\n                            onPress={()=>setCorrect(correct + 1)}\n                        >\n                            <Text style={{...styles.viewAnswerBtn, backgroundColor:\"green\"}}> \n                                Correct \n                            </Text>\n                        </TouchableOpacity>\n\n                        <TouchableOpacity\n                            onPress={()=>setFailed(failed + 1)}\n                        >\n                            <Text style={{...styles.viewAnswerBtn, backgroundColor:\"red\"}}> \n                                Incorrect\n                            </Text>\n                        </TouchableOpacity>\n                    </View>\n                )\n            }\n        </View>\n    )\n};\n\nexport default QuizeView;\n\n\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    count:{\n        color:\"#666\"\n    },\n    question:{\n        fontSize:20,\n        marginVertical:30,\n        color: \"#999\",\n    },\n    viewAnswerBtn:{\n        backgroundColor:\"lightblue\",\n        color:\"white\",\n        padding: 16,\n        width: 200,\n        marginBottom:20,\n        display:\"flex\",\n        textAlign:\"center\",\n        justifyContent:\"center\",\n        borderRadius:20\n    },\n    finished:{\n        paddingVertical:20\n    }\n});"]},"metadata":{},"sourceType":"module"}